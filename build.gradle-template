// Template gradle file for new inchworm project

plugins {
    id "us.kirchmeier.capsule" version "1.0.1"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

apply plugin: 'maven'
apply plugin: 'signing'

mainClassName='your_classname_here'

// Is this a snapshot version?
ext { isSnapshot = false }

ext {
    groupId = 'org.factcenter.inchworm'

    url = 'your_project_url'
    license = [
        name: 'MIT License',
        url: 'http://www.opensource.org/licenses/mit-license.php'
    ]
    developers = [
        [
            name: 'Developer Name',
            email: 'developer@example.org',
            organization: 'Developer Org',
            organizationUrl: 'Org URL'
        ]
    ]
    scm = [
        connection: 'scm:https://github.com/...git',
        developerConnection: 'scm:https://github.com/...git',
        url: project.url,
    ]
}


description = "Your project description"

// Your project version
version = "0.0"

dependencies {
    // Inchworm
    compile "org.factcenter.inchworm:inchworm:0.+"
    testCompile "$org.factcenter.inchworm:inchworm:0.+:tests"

    // Logging
    compile 'org.slf4j:slf4j-api:1.7.7'
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    runtime 'ch.qos.logback:logback-core:1.1.2'

    testCompile 'junit:junit:4.+'

    runtime 'org.codehaus.groovy:groovy:2.4.+'
}



/*==== You probably don't have to edit below this line =======*/

version += "${isSnapshot ? '-SNAPSHOT' : ''}"

ext {
    snapshotPublicationRepository = "https://oss.sonatype.org/content/repositories/snapshots/"
    releasePublicationRepository = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

    // Credentials for publication repositories (needed only for publishing)
    // Should be set in ${HOME}/.gradle/gradle.properties
    ossrhUser =  project.hasProperty('ossrhUser') ? project.property('ossrhUser') : ""
    osshrPassword = project.hasProperty('osshrPassword') ? project.property('osshrPassword') : ""
}

// Used to generate initial maven-dir layout
task "create-dirs" { description = "Create default maven directory structure" } << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}



/*===============================================
 *        Jars containing tests, javadoc, sources
 *===============================================*/
task testsJar(type: Jar) {
    classifier 'tests'
    from sourceSets.test.output
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar
    archives sourcesJar
    archives testsJar
}


/*===================================
 *        Repositories
 *===================================*/

repositories {
    // Try local repository first
    mavenLocal()

    // Use 'maven central' for other dependencies.
    mavenCentral()

    // Sonatype repository (for snapshots and not-yet-synced versions)
    if (isSnapshot) {
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
}

task "info" << {
        println "Project: ${project.name}"
println "Description: ${project.description}"
        println "--------------------------"
        println "GroupId: $groupId"
        println "Version: $version (${isSnapshot ? 'snapshot' : 'release'})"
        println ""
}
info.description 'Print some information about project parameters'


/*===================================
 *        Publishing
 *===================================*/
if (ossrhUser != "") {
    uploadArchives {
        repositories {

            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: releasePublicationRepository) {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }

                snapshotRepository(url: snapshotPublicationRepository) {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }

                pom.project {
                    name "${project.groupId}:${project.name}"
                    groupId project.groupId
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description project.description
                    url project.url

                    scm {
                        connection project.scm.connection
                        developerConnection project.scm.developerConnection
                        url project.scm.url
                    }

                    licenses {
                        license {
                            name project.license.name
                            url project.license.url
                        }
                    }

                    developers {
                        project.developers.each { dev  ->
                            developer {
                                name dev.name
                                email dev.email
                                organization dev.organization
                                organizationUrl dev.organizationUrl
                            }
                        }
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}


gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        if (!project.hasProperty('signing.secretKeyRingFile')) {
            ext."signing.secretKeyRingFile" = file("${System.properties['user.home']}/.gnupg/secring.gpg")
            logger.info("Using default GPG keyring: {}", ext."signing.secretKeyRingFile" )
        }
    }
}


